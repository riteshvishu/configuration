<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <InputSet
    id="CoverageInputSet"
    mode="WC7WorkersCompEmpLiabInsurancePolicyACov">
    <Require
      name="coveragePattern"
      type="gw.api.productmodel.ClausePattern"/>
    <Require
      name="coverable"
      type="Coverable"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Variable
      initialValue="coverable as WC7WorkersCompLine"
      name="wc7line"/>
    <Variable
      initialValue="wc7line.WC7WorkersCompEmpLiabInsurancePolicyACov"
      name="wc7EmpLiabCov"
      recalculateOnRefresh="true"/>
    <HiddenInput
      id="CovPatternDisplayName"
      value="coveragePattern.DisplayName"/>
    <InputGroup
      allowToggle="coveragePattern.allowToggle(coverable)"
      childrenVisible="coverable.getCoverageConditionOrExclusion(coveragePattern) != null"
      id="CovPatternInputGroup"
      label="coveragePattern.DisplayName"
      onToggle="coverable.setCoverageConditionOrExclusionExists(coveragePattern, VALUE)">
      <CovTermPackageInput
        editable="gw.web.productmodel.ChoiceCovTermUtil.isEditable(wc7EmpLiabCov.WC7EmpLiabLimitTerm) and wc7line.isLineCoverageTermEditable(wc7EmpLiabCov.WC7EmpLiabLimitTerm)"
        id="WC7EmpLiabLimitTermInput"
        label="wc7EmpLiabCov.WC7EmpLiabLimitTerm.DisplayName"
        required="wc7EmpLiabCov.WC7EmpLiabLimitTerm.Pattern.Required"
        value="wc7EmpLiabCov.WC7EmpLiabLimitTerm"/>
      <CovTermOptionInput
        editable="gw.web.productmodel.ChoiceCovTermUtil.isEditable(wc7EmpLiabCov.WC7EmpLiabPolicyLimitTerm) and wc7line.isLineCoverageTermEditable(wc7EmpLiabCov.WC7EmpLiabPolicyLimitTerm)"
        id="WC7EmpLiabPolicyLimitTermInput"
        label="wc7EmpLiabCov.WC7EmpLiabPolicyLimitTerm.DisplayName"
        required="wc7EmpLiabCov.WC7EmpLiabPolicyLimitTerm.Pattern.Required"
        value="wc7EmpLiabCov.WC7EmpLiabPolicyLimitTerm"/>
      <CovTermTypekeyInput
        editable="gw.web.productmodel.ChoiceCovTermUtil.isEditable(wc7EmpLiabCov.WC7StopGapTerm) and wc7line.isLineCoverageTermEditable(wc7EmpLiabCov.WC7StopGapTerm)"
        id="WC7StopGapTermInput"
        label="wc7EmpLiabCov.WC7StopGapTerm.DisplayName"
        required="wc7EmpLiabCov.WC7StopGapTerm.Pattern.Required"
        value="wc7EmpLiabCov.WC7StopGapTerm"
        visible="wc7EmpLiabCov.hasCovTerm(&quot;WC7StopGap&quot;)">
        <PostOnChange/>
      </CovTermTypekeyInput>
      <TextInput
        editable="gw.web.productmodel.ChoiceCovTermUtil.isEditable(wc7EmpLiabCov.WC7IncludedMonopolisticStatesTerm) and wc7line.isLineCoverageTermEditable(wc7EmpLiabCov.WC7IncludedMonopolisticStatesTerm)"
        id="WC7IncludedMonopolisticStatesTermInput"
        label="wc7EmpLiabCov.WC7IncludedMonopolisticStatesTerm.DisplayName"
        required="wc7EmpLiabCov.WC7IncludedMonopolisticStatesTerm.Pattern.Required"
        validationExpression="wc7line.validateIncludedMonopolisticStates(wc7EmpLiabCov.WC7IncludedMonopolisticStatesTerm.Value)"
        value="wc7EmpLiabCov.WC7IncludedMonopolisticStatesTerm.Value"
        visible="wc7EmpLiabCov.HasWC7IncludedMonopolisticStatesTerm and wc7EmpLiabCov.WC7StopGapTerm.Value == typekey.StopGap.TC_LISTEDSTATESONLY"/>
    </InputGroup>
  </InputSet>
</PCF>
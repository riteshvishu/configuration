<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <PanelSet
    id="RatingTxDetailsPanelSet"
    mode="WorkersCompLine">
    <Require
      name="thePeriod"
      type="PolicyPeriod"/>
    <Require
      name="totalPremLabel"
      type="String"/>
    <Require
      name="totalCostLabel"
      type="String"/>
    <Require
      name="revOpenForEdit"
      type="boolean"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Variable
      initialValue="thePeriod.WorkersCompLine.WCTransactions.toSet()"
      name="lineTxs"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="lineTxs.partition( \ t -&gt; t.WCCost.JurisdictionState ).toAutoMap( \ st -&gt; java.util.Collections.emptySet&lt;WCTransaction&gt;() )"
      name="partitionedTxs"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="getJurisdictions()"
      name="jurisdictions"
      recalculateOnRefresh="true"/>
    <PanelIterator
      elementName="jurisdiction"
      value="jurisdictions">
      <IteratorSort
        sortBy="jurisdiction"
        sortOrder="1"/>
      <Variable
        initialValue="partitionedTxs.get( jurisdiction.State )"
        name="stateTxs"
        recalculateOnRefresh="true"/>
      <Variable
        initialValue="jurisdiction.RatingPeriods"
        name="ratingPeriods"
        recalculateOnRefresh="true"/>
      <PanelRef
        visible="not stateTxs.Empty">
        <TitleBar
          title="jurisdiction.DisplayName"
          visible="jurisdictions.Count &gt; 1"/>
        <PanelSet
          id="JurisdictionPanelSet">
          <PanelIterator
            elementName="ratingPeriod"
            value="ratingPeriods.toTypedArray()">
            <Variable
              initialValue="stateTxs.byRatingPeriod( ratingPeriod )"
              name="periodTxs"
              recalculateOnRefresh="true"/>
            <PanelRef
              visible="not periodTxs.Empty">
              <DetailViewPanel
                id="PeriodDetailDV">
                <InputColumn>
                  <Label
                    label="standardPremLabel(ratingPeriods.Count &gt; 1, ratingPeriod)"/>
                  <ListViewInput
                    def="WCRateTxDetailLV(periodTxs)"
                    labelAbove="true">
                    <Toolbar/>
                  </ListViewInput>
                </InputColumn>
              </DetailViewPanel>
            </PanelRef>
          </PanelIterator>
          <PanelRef>
            <DetailViewPanel
              id="StateSummaryDetailDV">
              <InputColumn>
                <Label
                  label="displaykey.Web.SubmissionWizard.Quote.WC.OtherPremiumAndTax"/>
                <ListViewInput
                  def="WCRateTxDetailStateLV(stateTxs, jurisdiction)"
                  labelAbove="true">
                  <Toolbar/>
                </ListViewInput>
              </InputColumn>
            </DetailViewPanel>
          </PanelRef>
        </PanelSet>
      </PanelRef>
    </PanelIterator>
    <PanelRef
      id="GrandTotalPanel">
      <TitleBar
        id="grandTotalTitle"
        title="displaykey.Web.Quote.TotalCostLabel.Total2(gw.api.util.StringUtil.formatNumber(lineTxs.AmountSum(thePeriod.PreferredSettlementCurrency).Amount as java.lang.Double, &quot;currency&quot;))"/>
      <DetailViewPanel/>
    </PanelRef>
    <Code><![CDATA[
function standardPremLabel(splitPeriod : boolean, ratingPeriod : gw.lob.wc.rating.WCRatingPeriod ) : String {
  if (splitPeriod) {
    return displaykey.Web.Quote.WC.StandardPremium.SplitPeriod( gw.api.util.StringUtil.formatDate(ratingPeriod.RatingStart, "short"),
      gw.api.util.StringUtil.formatDate(ratingPeriod.RatingEnd, "short") )
  } else {
    return displaykey.Web.Quote.WC.StandardPremium.OnePeriod
  }
}

// Get any jurisdictions that exist on this branch, but additionally any that exist in the prior branch.
// This is necessary in case a jurisdiction was removed as of the policy start on this branch.  In that case,
// the jurisdiction does not exist, and should not have cost, it *will* have transactions that need to
// be displayed (and they'll refer to a cost on the prior branch).
function getJurisdictions() : WCJurisdiction[]
{
  var jurisByIDs = thePeriod.WorkersCompLine.RepresentativeJurisdictions.partitionUniquely( \ juris -> juris.FixedId )
  for ( juris in thePeriod.BasedOn.WorkersCompLine.RepresentativeJurisdictions )
  {
    if ( not jurisByIDs.containsKey( juris.FixedId ) )  // in case we removed a jurisdiction as of the start of the period in this branch
    {
      jurisByIDs.put( juris.FixedId, juris )
    }
  }
  return jurisByIDs.Values.toTypedArray().sortBy( \ juris -> juris.State )
}
    ]]></Code>
  </PanelSet>
</PCF>
<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <ListViewPanel
    id="QuestionSetLV">
    <Require
      name="questionSet"
      type="gw.api.productmodel.QuestionSet"/>
    <Require
      name="answerContainer"
      type="AnswerContainer"/>
    <Require
      name="onChangeBlock"
      type="block()"/>
    <Variable
      initialValue="questionSet.getOrderedQuestions().where(\ q -&gt; answerContainer.getAnswer(q) != null and q.isQuestionVisible(answerContainer))"
      name="questions"
      recalculateOnRefresh="true"/>
    <!-- Iterate and display all questions based on their type -->
    <RowIterator
      editable="true"
      elementName="question"
      pageSize="0"
      value="questions">
      <IteratorSort
        sortBy="question.Priority"
        sortOrder="1"/>
      <Row>
        <Cell
          id="questionText"
          value="gw.api.web.HtmlUtil.indent(question.Text, question.Indent)"
          width="500"
          wrap="true"/>
        <ModalCellRef
          def="QuestionModalInput(question, answerContainer, wrapOnChangeBlock(answerContainer, question, onChangeBlock))"
          editable="true"
          mode="question.getInputSetMode(answerContainer, onChangeBlock)"/>
      </Row>
      <RowIterator
        editable="false"
        elementName="supplementalText"
        pageSize="0"
        value="question.SupplementalTexts as gw.api.productmodel.SupplementalText[]">
        <IteratorSort
          sortBy="supplementalText.Priority"
          sortOrder="1"/>
        <Row>
          <Cell
            id="subQuestionText"
            value="gw.api.web.HtmlUtil.indent(supplementalText.Text, question.Indent)"
            wrap="true"/>
          <Cell
            id="empty"/>
        </Row>
      </RowIterator>
    </RowIterator>
    <Code><![CDATA[function wrapOnChangeBlock(container : AnswerContainer, question : gw.api.productmodel.Question, originalOnChangeBlock : block()) : block() {
  return \ -> {
    if (originalOnChangeBlock != null) {
      originalOnChangeBlock()  
    }
    
    syncQuestionSetIfAlwaysPostOnChange(container, question)
    
    if (originalOnChangeBlock != null or question.QuestionPostOnChange == "always" or not container.getQuestionDependencies(question).Empty) {
      gw.api.web.PebblesUtil.invalidateIterators(CurrentLocation, gw.api.productmodel.Question)
    }
  }
}

function syncQuestionSetIfAlwaysPostOnChange(container : AnswerContainer, question : gw.api.productmodel.Question) {
  if (question.QuestionPostOnChange == "always") {
    gw.web.productmodel.ProductModelSyncIssuesHandler.syncQuestions({container}, {question.QuestionSet}, null) 
  }
}]]></Code>
  </ListViewPanel>
</PCF>
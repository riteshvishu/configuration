<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <PanelSet
    id="RatingCumulDetailsPanelSet"
    mode="WC7Line">
    <Require
      name="period"
      type="PolicyPeriod"/>
    <Require
      name="jobWizardHelper"
      type="web.job.JobWizardHelper"/>
    <Require
      name="isEditable"
      type="boolean"/>
    <Variable
      initialValue="period.WC7Line.Costs.cast(WC7Cost)"
      name="lineCosts"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="lineCosts.partition(\ c -&gt; c.JurisdictionState).toAutoMap(\ st -&gt; java.util.Collections.emptySet&lt;WC7Cost&gt;())"
      name="partitionCosts"
      recalculateOnRefresh="true"/>
    <Variable
      initialValue="period.WC7Line.RepresentativeJurisdictions.sortBy(\ juris -&gt; juris.Jurisdiction)"
      name="jurisdictions"
      recalculateOnRefresh="true"/>
    <PanelRef
      def="RatingOverrideButtonDV(period, period.WC7Line, jobWizardHelper, CurrentLocation.InEditMode)"
      id="RatingOverrideButtonDV"/>
    <PanelIterator
      elementName="jurisdiction"
      value="jurisdictions">
      <IteratorSort
        sortBy="jurisdictions"
        sortOrder="1"/>
      <Variable
        initialValue="partitionCosts.get(jurisdiction.Jurisdiction)"
        name="stateCosts"
        recalculateOnRefresh="true"/>
      <Variable
        initialValue="jurisdiction.RatingPeriods"
        name="ratingPeriods"
        recalculateOnRefresh="true"/>
      <PanelRef
        visible="stateCosts.HasElements">
        <TitleBar
          title="jurisdiction.DisplayName"
          visible="jurisdictions.Count &gt; 1"/>
        <PanelSet
          id="JurisdictionPanelSet">
          <PanelIterator
            elementName="ratingPeriod"
            value="ratingPeriods.toTypedArray()">
            <Variable
              initialValue="stateCosts.byRatingPeriod(ratingPeriod)"
              name="periodCosts"
              recalculateOnRefresh="true"/>
            <PanelRef
              visible="!periodCosts.Empty">
              <DetailViewPanel
                id="PeriodDetailDV">
                <InputColumn>
                  <Label
                    label="standardPremLabel(ratingPeriods.Count &gt; 1, ratingPeriod)"/>
                  <ListViewInput
                    def="WC7StateCostsLV(periodCosts.getStandardPremiums(period.PreferredSettlementCurrency))">
                    <Toolbar/>
                  </ListViewInput>
                </InputColumn>
              </DetailViewPanel>
            </PanelRef>
          </PanelIterator>
          <PanelRef>
            <DetailViewPanel
              id="StateSummaryDetailDV">
              <InputColumn>
                <Label
                  label="displaykey.Web.SubmissionWizard.Quote.WC.OtherPremiumAndTax"/>
                <ListViewInput
                  def="WC7StateCostsLV(stateCosts.toSet().getOtherPremiumAndSurcharges(period.PreferredSettlementCurrency))">
                  <Toolbar/>
                </ListViewInput>
              </InputColumn>
            </DetailViewPanel>
          </PanelRef>
        </PanelSet>
      </PanelRef>
    </PanelIterator>
    <PanelRef
      id="GrandTotalPanel">
      <TitleBar
        id="grandTotalTitle"
        title="displaykey.Web.Quote.TotalCostLabel.Total2(gw.api.util.StringUtil.formatNumber(lineCosts.AmountSum(period.PreferredSettlementCurrency) as java.lang.Double, &quot;currency&quot;))"/>
      <DetailViewPanel/>
    </PanelRef>
    <Code><![CDATA[function standardPremLabel(splitPeriod : boolean, ratingPeriod : gw.lob.wc7.rating.WC7RatingPeriod) : String {
  if (splitPeriod) {
    return displaykey.Web.Quote.WC.StandardPremium.SplitPeriod(gw.api.util.StringUtil.formatDate(ratingPeriod.RatingStart, "short"),
      gw.api.util.StringUtil.formatDate(ratingPeriod.RatingEnd, "short"))
  } else {
    return displaykey.Web.Quote.WC.StandardPremium.OnePeriod
  }
}

function sortedDates(jurisdiction : WC7Jurisdiction) : java.util.Date[] {
  var rpsds = jurisdiction.getSortedRPSDs().toList().map(\ r -> r.StartDate)
  rpsds.add(period.PeriodStart)
  java.util.Collections.sort(rpsds)
  return rpsds.toTypedArray()
}]]></Code>
  </PanelSet>
</PCF>